datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING") 
}

generator client {
  provider = "prisma-client-js"
}

model ShopifyConnection {
  id          String   @id @default(cuid())
  userId      String
  shopUrl     String
  accessToken String
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recommendations RecommendationConfig?

  @@unique([userId, shopUrl])
}

model RecommendationConfig {
  id              String   @id @default(cuid())
  userId          String
  enabled         Boolean  @default(false)
  productCount    Int      @default(4)
  algorithm       String   @default("similar")
  displayLocation String   @default("product_page")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  shopifyConnection ShopifyConnection @relation(fields: [shopifyConnectionId], references: [id])
  shopifyConnectionId String @unique
  metrics         RecommendationMetrics[]
  detailedMetrics RecommendationMetric[]    
}

// Existing aggregated metrics model
model RecommendationMetrics {
  id                  String   @id @default(cuid())
  configId            String
  impressions         Int      @default(0)
  clicks              Int      @default(0)
  conversions         Int      @default(0)
  date                DateTime @default(now())
  config              RecommendationConfig @relation(fields: [configId], references: [id])

  @@unique([configId, date])
  @@index([date])
}

// New detailed events model
model RecommendationMetric {
  id          String   @id @default(cuid())
  type        String   // 'impression', 'click', or 'conversion'
  configId    String
  productId   String?
  userId      String
  timestamp   DateTime @default(now())
  config      RecommendationConfig @relation(fields: [configId], references: [id])

  @@index([configId])
  @@index([timestamp])
  @@index([type])
}